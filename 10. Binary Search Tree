#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct NODE
{
    int info;
    struct NODE* left;
    struct NODE* right;
};
typedef struct NODE* node;

node INSERT(node R)
{
    int i;
    char dir[6];
    node NN=(node)malloc(sizeof(struct NODE));
    printf("Enter the info to be inserted:");
    scanf("%d",&NN->info);
    NN->left=NN->right=NULL;
    if(R==NULL)
    {
        printf("New node inserted as the root\n");
        return NN;
    }
    direct: printf("Enter direction to insert:");
    scanf("%s",dir);
    node CN=R,PN=NULL;
    for(i=0;i<strlen(dir);i++)
    {
        PN=CN;
        if(CN==NULL) break;
        if(dir[i]=='L' || dir[i]=='l') CN=CN->left;
        else if(dir[i]=='R' || dir[i]=='r') CN=CN->right;
        else break;
    }
    if(i!=strlen(dir) || CN!=NULL)
    {
        printf("INVALID DIRECTION\n");
        goto direct;
    }
    if(dir[i-1]=='L' || dir[i-1]=='l')
    PN->left=NN; 
    else if(dir[i-1]=='R' || dir[i-1]=='r') 
    PN->right=NN; 
    printf("INSERTION SUCCESSFULL\n");
    return R;
}

void INORDER(node R)
{
    if(R==NULL) return;
    INORDER(R->left);
    printf("%d ",R->info);
    INORDER(R->right);
}

void PREORDER(node R)
{
    if(R==NULL) return;
    printf("%d ",R->info);
    PREORDER(R->left);
    PREORDER(R->right);
}

void POSTORDER(node R)
{
    if(R==NULL) return;
    POSTORDER(R->left);
    POSTORDER(R->right);
    printf("%d ",R->info);
}

void DISPLAY(node R)
{
    if(R==NULL)
    {
        printf("Tree is empty\n");
        return;
    }
    printf("\nINORDER Traversal: "); 
    INORDER(R);
    printf("\nPREORDER Traversal: "); 
    PREORDER(R);
    printf("\nPOSTORDER Traversal: "); 
    POSTORDER(R);
    printf("\n");
}

node SEARCH(node R, int info,node* PN)
{
    if(R==NULL) return NULL;
    node NS=NULL;
    if(R->info==info)
    {
        NS=R;
    }
    if(NS==NULL)
    {
        *PN=R;
        NS=SEARCH(R->left,info,PN);
    }
    if(NS==NULL)
    {
        *PN=R;
        NS=SEARCH(R->right,info,PN);
    }
    return NS;
}

node DELETE(node R)
{
    if(R==NULL)
    {
        printf("Tree is empty\n");
        return NULL;
    }
    int info;
    printf("Enter the info of the node to be deleted:");
    scanf("%d",&info);
    
    
    /*ROOT WITH NO CHILDREN*/
    if(R->info==info && R->left==NULL && R->right==NULL)
    {
        printf("Deleted root node with info = %d\n",R->info);
        free(R);
        return NULL;
    }
    
    node PN;
    node ND=SEARCH(R,info,&PN);
    if(ND==NULL)
    {
        printf("INVALID\n",info);
        return R;
    }
    else
    {
        printf("Deleting node info = %d and it's parent node info = %d\n",ND->info,PN->info);
    }

    /*LEAF NODE*/
    if(ND->left==NULL && ND->right==NULL)
    {
        if(ND==PN->left) PN->left=NULL;
        else PN->right=NULL;
        free(ND);
    }

    /*NON-LEAF WITH ONE CHILD*/
    else if((ND->left!=NULL && ND->right==NULL)
            ||(ND->left==NULL && ND->right!=NULL))
            {
                
                if(ND->right==NULL)              /*LEFT CHILD*/
                {
                    if(ND==PN->left) PN->left=ND->left;
                    else PN->right=ND->left;
                }
                
                else
                {
                    if(ND==PN->left) PN->left=ND->right;     /*RIGHT CHILD*/
                    else PN->right=ND->right;
                }
            free(ND);
        }
    
    /*NON-LEAF WITH TWO CHILDREN*/
    else
    {
        node IS=ND->right, ISP = ND;
        //? IS= INORDER successor, ISP= INORDER successor's parent.
        while(IS->left!=NULL){
            ISP=IS;
            IS=IS->left;
        }
        ND->info=IS->info;
        if(IS->left==NULL && IS->right==NULL){
            if(IS==ISP->left) ISP->left=NULL;
            else ISP->right=NULL;
        }else{
            if(IS==ISP->left) ISP->left=IS->right;
            else ISP->right=IS->right;
        }
        free(IS);
    }
    printf("Node deleted with info: %d\n",info);
    return R;
}

int HEIGHT(node R)
{
    if(R==NULL) return 0;
    
    int leftHeight=HEIGHT(R->left);
    int rightHeight=HEIGHT(R->right);

    if(leftHeight>rightHeight) 
    return leftHeight+1;
    return rightHeight+1;
}

node CREATECOPY(node R)
{
    if(R==NULL) return NULL;
    node temp=(node)malloc(sizeof(struct NODE));
    temp=R;
    temp->left=CREATECOPY(R->left);
    temp->right=CREATECOPY(R->right);
    temp->info=R->info;
    return temp;
}

int main()
{
    int choice,info;
    node root=NULL;
    node NS=NULL;
    node PN=NULL;
    while(1)
    {
        printf("1.Insert a node\n");
        printf("2.Display tree\n");
        printf("3.Search a node\n");
        printf("4.Delete a node\n");
        printf("5.Find height of the tree\n");
        printf("6.Create a copy of tree\n");
        printf("7.Exit\n");
        printf("Enter your choice:");
        scanf("%d",&choice);

        switch(choice)
        {
            
            case 1: root=INSERT(root); break;
            case 2: DISPLAY(root); break;
            case 3: printf("Enter the info of the node to be searched:");
                    scanf("%d",&info);
                    if(root==NULL){
                        printf("Tree is empty\n");
                    }else if(root->info==info){
                        printf("Searching node info = %d and it is the root of the tree\n",root->info);
                    }else{
                        NS=SEARCH(root,info,&PN);
                        if(NS==NULL){
                            printf("Node with info = %d doesn't exist in the tree\n",info);
                        }else{
                        printf("Searching node info = %d and it's parent node info = %d\n",NS->info,PN->info);
                        }
                    }
                    break;
            case 4: root = DELETE(root);
                    DISPLAY(root);
                    break;
            case 5: printf("Height of the tree: %d\n",HEIGHT(root));
                    break;
            case 6: if(root==NULL){
                        printf("Tree is empty\n");
                    }else {
                        node copy = CREATECOPY(root);
                        printf("Copy of the tree created:\n");
                        DISPLAY(copy);
                    }
            case 7: exit(0);
                    break;
            default: printf("INVALID CHOICE");
        }
    }
}
